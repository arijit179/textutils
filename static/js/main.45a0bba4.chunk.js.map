{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","style","color","title","type","id","about","onClick","toogleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","document","getSelection","removeAllRanges","split","join","filter","elem","About","myStyle","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","cls","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mOAKe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,aAAaC,MAAO,CAAEC,MAAsB,SAAfL,EAAME,KAAkB,QAAU,SAAjG,SAA6GF,EAAMM,QACnH,wBAAQL,UAAU,iBAAiBM,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMN,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BO,GAAG,yBAA7C,UACI,qBAAIP,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,kBAAkB,eAAa,OAAOE,GAAG,aAAaC,MAAO,CAAEC,MAAsB,SAAfL,EAAME,KAAkB,QAAU,SAAxH,oBAEJ,oBAAID,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,SAASC,MAAO,CAAEC,MAAsB,SAAfL,EAAME,KAAkB,QAAU,SAAzF,SAAqGF,EAAMS,aAenH,sBAAKR,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,QAAnE,SAAd,UACI,uBAAOD,UAAU,mBAAmBM,KAAK,WAAWC,GAAG,yBAAyBE,QAASV,EAAMW,aAC/F,uBAAOV,UAAU,mBAAmBW,QAAQ,yBAA5C,SAAqE,uDCjC9E,SAASC,EAASb,GAC7B,MAAwBc,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA8BA,OACI,qCACI,sBAAKf,UAAU,YAAYG,MAAS,CAACC,MAAuB,SAAfL,EAAME,KAAgB,QAAQ,SAA3E,UACI,oBAAID,UAAY,OAAhB,SAAwBD,EAAMiB,UAC9B,qBAAKhB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAeiB,MAAOH,EAAMI,SARzC,SAACC,GACpBJ,EAAQI,EAAMC,OAAOH,QAOiEd,MAAS,CAACkB,gBAAiC,SAAftB,EAAME,KAAgB,gBAAgB,QAAUG,MAAuB,SAAfL,EAAME,KAAgB,QAAQ,SAAUM,GAAG,QAAQe,KAAK,QAE1N,wBAAQC,SAA0B,IAAdT,EAAKU,OAAYlB,KAAK,SAASN,UAAU,kBAAkBS,QAnCrE,WAClB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,GACR1B,EAAM4B,UAAU,yBAA2B,YAgCnC,kCAGA,wBAAQJ,SAA0B,IAAdT,EAAKU,OAAYlB,KAAK,SAASN,UAAU,4BAA4BS,QAjC/E,WAClB,IAAIgB,EAAUX,EAAKc,cACnBb,EAAQU,GACR1B,EAAM4B,UAAU,yBAA2B,YA8BnC,kCAGA,wBAAQJ,SAA0B,IAAdT,EAAKU,OAAYlB,KAAK,SAASN,UAAU,kBAAkBS,QA/BlE,WAErBM,EADc,IAEdhB,EAAM4B,UAAU,eAAiB,YA4BzB,wBAGA,wBAAQJ,SAA0B,IAAdT,EAAKU,OAAWlB,KAAK,SAASN,UAAU,4BAA4BS,QA7BjF,WACfoB,UAAUC,UAAUC,UAAUjB,GAC9BkB,SAASC,eAAeC,kBACxBnC,EAAM4B,UAAU,2BAA6B,YA0BrC,uBAGA,wBAAQJ,SAA0B,IAAdT,EAAKU,OAAYlB,KAAK,SAASN,UAAU,kBAAkBS,QA3BjE,WACtB,IAAIgB,EAAUX,EAAKqB,MAAM,QACzBpB,EAAQU,EAAQW,KAAK,MACrBrC,EAAM4B,UAAU,uBAAyB,YAwBjC,oCAIJ,sBAAK3B,UAAU,YAAYG,MAAS,CAACC,MAAuB,SAAfL,EAAME,KAAgB,QAAQ,SAA3E,UACI,oBAAID,UAAY,OAAhB,+BACA,oBAAGA,UAAY,OAAf,UAAuBc,EAAKqB,MAAM,OAAOE,QAAO,SAACC,GAAQ,OAAqB,IAAdA,EAAKd,UAAaA,OAAlF,cAAqGV,EAAKU,OAA1G,iBACA,oBAAGxB,UAAY,OAAf,UAAuB,KAAQc,EAAKqB,MAAM,KAAKE,QAAO,SAACC,GAAQ,OAAqB,IAAdA,EAAKd,UAAaA,OAAxF,sBACA,oBAAIxB,UAAY,OAAhB,qBACA,mBAAGA,UAAY,OAAf,SAAuBc,EAAKU,OAAO,EAAEV,EAAK,6BC5D3C,SAASyB,EAAMxC,GAC3B,IAAIyC,EAAU,CACTnB,gBAAiC,SAAftB,EAAME,KAAgB,gBAAgB,QACxDG,MAAuB,SAAfL,EAAME,KAAgB,QAAQ,SAwB1C,OACI,sBAAKD,UAAY,YAAjB,UACI,oBAAIA,UAAY,OAAOG,MAAS,CAACC,MAAuB,SAAfL,EAAME,KAAgB,QAAQ,SAAvE,sBACA,sBAAKD,UAAU,YAAYO,GAAG,mBAA9B,UACI,sBAAKP,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBO,GAAG,aAApC,SACI,wBAAQP,UAAU,mBAAkBM,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAcH,MAASqC,EAApK,SACA,2DAGJ,qBAAKjC,GAAG,cAAcP,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,qBAAKA,UAAU,iBAAiBG,MAASqC,EAAzC,iUAKR,sBAAKxC,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBO,GAAG,aAApC,SACI,wBAAQP,UAAU,6BAA4BM,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAcH,MAASqC,EAA/K,SACA,qDAGJ,qBAAKjC,GAAG,cAAcP,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,qBAAKA,UAAU,iBAAiBG,MAASqC,EAAzC,kUAKR,sBAAKxC,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBO,GAAG,eAApC,SACI,wBAAQP,UAAU,6BAA6BM,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAgBH,MAASqC,EAApL,SACA,4DAGJ,qBAAKjC,GAAG,gBAAgBP,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,qBAAKA,UAAU,iBAAiBG,MAASqC,EAAzC,wUFjBxB1C,EAAO2C,aAAe,CAClBpC,MAAO,iBACPG,MAAO,SGnCIkC,MAZf,SAAe3C,GAKX,OACIA,EAAM4C,OAAS,sBAAK3C,UAAS,sBAAiBD,EAAM4C,MAAMrC,KAA7B,gCAAiEsC,KAAK,QAApF,UACX,iCANW,SAACC,GAChB,IAAMC,EAAQD,EAAKjB,cACnB,OAAOkB,EAAMC,OAAO,GAAGrB,cAAgBoB,EAAME,MAAM,GAItCC,CAAWlD,EAAM4C,MAAMrC,QADrB,KACuCP,EAAM4C,MAAMO,Q,OCkE3DC,MA9Df,WACE,MAAwBtC,mBAAS,SAAjC,mBAAOZ,EAAP,KAAamD,EAAb,KACA,EAA0BvC,mBAAS,MAAnC,mBAAO8B,EAAP,KAAcU,EAAd,KAEM1B,EAAY,SAAC2B,EAAShD,GAC1B+C,EAAS,CACPH,IAAKI,EACLhD,KAAMA,IAERiD,YAAW,WACTF,EAAS,QACR,MA4BL,OACE,mCACE,eAAC,IAAD,WACE,cAACvD,EAAD,CAAQO,MAAM,YAAYJ,KAAMA,EAAMS,WArBzB,SAAC8C,GAEL,UAATvD,GACFmD,EAAQ,QACRpB,SAASyB,KAAKtD,MAAMkB,gBAAkB,UACtCM,EAAU,6BAA8B,aAKxCyB,EAAQ,SACRpB,SAASyB,KAAKtD,MAAMkB,gBAAkB,QACtCM,EAAU,8BAA+B,eAUvC,cAAC,EAAD,CAAOgB,MAAOA,IACd,qBAAK3C,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0D,OAAK,EAACC,KAAK,SAAlB,SACE,cAACpB,EAAD,CAAOtC,KAAQA,MAEjB,cAAC,IAAD,CAAOyD,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC/C,EAAD,CAAUe,UAAWA,EAAWX,QAAQ,qEAAqEf,KAAMA,iBCnDlH2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BZ,M","file":"static/js/main.45a0bba4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/textutils\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/textutils\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    {/* <div className=\"d-flex\">\r\n                        <div className=\"bg-primary mx-2\" onClick={() => { props.toogleMode('primary') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-danger mx-2\" onClick={() => { props.toogleMode('danger') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-success mx-2\" onClick={() => { props.toogleMode('success') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-warning mx-2\" onClick={() => { props.toogleMode('warning') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-light mx-2\" onClick={() => { props.toogleMode('light') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                        <div className=\"bg-dark mx-2\" onClick={() => { props.toogleMode('dark') }} style={{ width: '30px', height: '30px', borderRadius: '150px', cursor: 'pointer' }}></div>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-2`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toogleMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"><b>Dark Mode</b></label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'About'\r\n}","import React, { useState } from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    \r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\" , \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\" , \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\" , \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text copied to clipboard\" , \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        var newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\" , \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\" style = {{color : props.mode === 'dark'?'white':'black'}}>\r\n                <h3 className = \"mb-3\">{props.heading}</h3>\r\n                <div className=\"my-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style = {{backgroundColor : props.mode === 'dark'?'rgb(29 52 86)':'white' , color : props.mode === 'dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled = {text.length===0} type=\"submit\" className=\"btn btn-primary\" onClick={handleUpClick}>\r\n                    Convert to Uppercase\r\n                </button>\r\n                <button disabled = {text.length===0} type=\"submit\" className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>\r\n                    Convert to Lowercase\r\n                </button>\r\n                <button disabled = {text.length===0} type=\"submit\" className=\"btn btn-primary\" onClick={handleClearClick}>\r\n                    Clear Text\r\n                </button>\r\n                <button disabled = {text.length===0}type=\"submit\" className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>\r\n                    Copy Text\r\n                </button>\r\n                <button disabled = {text.length===0} type=\"submit\" className=\"btn btn-primary\" onClick={handleExtraSpaces}>\r\n                    Remove extra spaces\r\n                </button>\r\n            </div>\r\n            <div className=\"container\" style = {{color : props.mode === 'dark'?'white':'black'}}>\r\n                <h2 className = \"my-3\">Your text summary</h2>\r\n                <p className = \"my-3\">{text.split(/\\s+/).filter((elem)=>{return elem.length!==0}).length} words and {text.length} characters</p>\r\n                <p className = \"my-3\">{0.008 * text.split(' ').filter((elem)=>{return elem.length!==0}).length} Minutes to read</p>\r\n                <h3 className = \"my-3\">Preview</h3>\r\n                <p className = \"my-3\">{text.length>0?text:\"Nothing to Preview\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n   let myStyle = {\r\n        backgroundColor : props.mode === 'dark'?'rgb(29 52 86)':'white' , \r\n        color : props.mode === 'dark'?'white':'black'\r\n    }\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"white\"\r\n    // })\r\n    // const [btnText, setBtnText] = useState('Enable dark mode');\r\n\r\n    // const toogleStyle = () => {\r\n    //     if (myStyle.color === 'black') {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setBtnText('Enable light mode');\r\n    //     }\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText('Enable dark mode');\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className = \"container\">\r\n            <h2 className = \"my-3\" style = {{color : props.mode === 'dark'?'white':'black'}}>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\"  >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\"type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style = {myStyle}>\r\n                        <strong>Analyze your text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                             It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\"type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style = {myStyle}>\r\n                        <strong>Free to use</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                             It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style = {myStyle}>\r\n                        <strong>Browser compatible</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                             It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container\">\r\n                <button type=\"button\" onClick={toogleStyle} className=\"btn btn-primary my-3\">{btnText}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  // const removeBodyClasses=() => {\n  //   document.body.classList.remove('bg-light');\n  //   document.body.classList.remove('bg-dark');\n  //   document.body.classList.remove('bg-primary');\n  //   document.body.classList.remove('bg-success');\n  //   document.body.classList.remove('bg-warning');\n  //   document.body.classList.remove('bg-danger');\n  // }\n  const toogleMode = (cls) => {\n    // removeBodyClasses();\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#021633';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.body.classList.add('bg-'+cls);\n      // showAlert(cls+\" mode has been enabled\", cls);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n\n    // }\n  }\n}\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toogleMode={toogleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\" >\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode = {mode}/>\n            </Route>\n            <Route exact path=\"/textutils\">\n              <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter,character counter,remove extra spaces\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n// {/* <div className = \"container\">\n//     <About/>\n//     </div> */}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}